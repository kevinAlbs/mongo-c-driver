####################################
# Evergreen configuration
#
# Generated with evergreen_config_generator from
# github.com/mongodb-labs/drivers-evergreen-tools
#
# DO NOT EDIT THIS FILE
#
####################################
stepback: true
command_type: system
exec_timeout_secs: 2400
functions:
  fetch source:
  - command: git.get_project
    params:
      directory: mongoc
  - command: shell.exec
    params:
      working_dir: mongoc
      shell: bash
      script: |-
        set -o errexit
        # TODO: CDRIVER-3573 do not hardcode the version.
        if [ -n "${github_pr_number}" -o "${is_patch}" = "true" ]; then
           # This is a GitHub PR or patch build, probably branched from master
           VERSION_CURRENT="1.18.0"
           echo $VERSION_CURRENT > "VERSION_CURRENT"
           VERSION=$VERSION_CURRENT-${version_id}
        else
           VERSION=latest
        fi
        echo "CURRENT_VERSION: $VERSION" > expansion.yml
  - command: expansions.update
    params:
      file: mongoc/expansion.yml
  - command: shell.exec
    params:
      continue_on_err: true
      shell: bash
      script: |-
        set -o errexit
        rm -f *.tar.gz
        curl --retry 5 https://s3.amazonaws.com/mciuploads/${project}/${branch_name}/mongo-c-driver-${CURRENT_VERSION}.tar.gz --output mongoc.tar.gz -sS --max-time 120
  upload release:
  - command: shell.exec
    params:
      shell: bash
      script: '[ -f mongoc/cmake_build/mongo*gz ] && mv mongoc/cmake_build/mongo*gz
        mongoc.tar.gz'
  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      remote_file: ${project}/${branch_name}/mongo-c-driver-${CURRENT_VERSION}.tar.gz
      bucket: mciuploads
      permissions: public-read
      local_file: mongoc.tar.gz
      content_type: ${content_type|application/x-gzip}
  upload build:
  - command: archive.targz_pack
    params:
      target: ${build_id}.tar.gz
      source_dir: mongoc
      include:
      - ./**
  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      remote_file: ${project}/${build_variant}/${revision}/${task_name}/${build_id}.tar.gz
      bucket: mciuploads
      permissions: public-read
      local_file: ${build_id}.tar.gz
      content_type: ${content_type|application/x-gzip}
  release archive:
  - command: shell.exec
    type: test
    params:
      working_dir: mongoc
      shell: bash
      script: |-
        set -o errexit
        # Need modern Sphinx for :caption: in literal includes.
        python -m virtualenv venv
        cd venv
        . bin/activate
        ./bin/pip install sphinx docutils==0.17.1
        cd ..
        export MONGOC_TEST_FUTURE_TIMEOUT_MS=30000
        export MONGOC_TEST_SKIP_LIVE=on
        export MONGOC_TEST_SKIP_SLOW=on
        sh .evergreen/check-release-archive.sh
  install ssl:
  - command: shell.exec
    params:
      working_dir: mongoc
      shell: bash
      script: |-
        set -o errexit
        SSL=${SSL} sh .evergreen/install-ssl.sh
  fetch build:
  - command: shell.exec
    params:
      continue_on_err: true
      shell: bash
      script: |-
        set -o errexit
        rm -rf mongoc
  - command: s3.get
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      remote_file: ${project}/${build_variant}/${revision}/${BUILD_NAME}/${build_id}.tar.gz
      bucket: mciuploads
      local_file: build.tar.gz
  - command: shell.exec
    params:
      continue_on_err: true
      shell: bash
      script: |-
        set -o errexit
        mkdir mongoc
        if command -v gtar 2>/dev/null; then
           TAR=gtar
        else
           TAR=tar
        fi
        $TAR xf build.tar.gz -C mongoc/
  upload docs:
  - command: shell.exec
    params:
      silent: true
      working_dir: mongoc/cmake_build/src/libbson
      shell: bash
      script: |-
        set -o errexit
        export AWS_ACCESS_KEY_ID=${aws_key}
        export AWS_SECRET_ACCESS_KEY=${aws_secret}
        aws s3 cp doc/html s3://mciuploads/${project}/docs/libbson/${CURRENT_VERSION} --recursive --acl public-read --region us-east-1
  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      remote_file: ${project}/docs/libbson/${CURRENT_VERSION}/index.html
      bucket: mciuploads
      permissions: public-read
      local_file: mongoc/cmake_build/src/libbson/doc/html/index.html
      content_type: text/html
      display_name: libbson docs
  - command: shell.exec
    params:
      silent: true
      working_dir: mongoc/cmake_build/src/libmongoc
      shell: bash
      script: |-
        set -o errexit
        export AWS_ACCESS_KEY_ID=${aws_key}
        export AWS_SECRET_ACCESS_KEY=${aws_secret}
        aws s3 cp doc/html s3://mciuploads/${project}/docs/libmongoc/${CURRENT_VERSION} --recursive --acl public-read --region us-east-1
  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      remote_file: ${project}/docs/libmongoc/${CURRENT_VERSION}/index.html
      bucket: mciuploads
      permissions: public-read
      local_file: mongoc/cmake_build/src/libmongoc/doc/html/index.html
      content_type: text/html
      display_name: libmongoc docs
  upload man pages:
  - command: shell.exec
    params:
      silent: true
      working_dir: mongoc
      shell: bash
      script: |-
        set -o errexit
        # Get "aha", the ANSI HTML Adapter.
        git clone --depth 1 https://github.com/theZiz/aha.git aha-repo
        cd aha-repo
        make
        cd ..
        mv aha-repo/aha .
        sh .evergreen/man-pages-to-html.sh libbson cmake_build/src/libbson/doc/man > bson-man-pages.html
        sh .evergreen/man-pages-to-html.sh libmongoc cmake_build/src/libmongoc/doc/man > mongoc-man-pages.html
  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      remote_file: ${project}/man-pages/libbson/${CURRENT_VERSION}/index.html
      bucket: mciuploads
      permissions: public-read
      local_file: mongoc/bson-man-pages.html
      content_type: text/html
      display_name: libbson man pages
  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      remote_file: ${project}/man-pages/libmongoc/${CURRENT_VERSION}/index.html
      bucket: mciuploads
      permissions: public-read
      local_file: mongoc/mongoc-man-pages.html
      content_type: text/html
      display_name: libmongoc man pages
  upload coverage:
  - command: shell.exec
    params:
      silent: true
      working_dir: mongoc
      shell: bash
      script: |-
        set -o errexit
        export AWS_ACCESS_KEY_ID=${aws_key}
        export AWS_SECRET_ACCESS_KEY=${aws_secret}
        aws s3 cp coverage s3://mciuploads/${project}/${build_variant}/${revision}/${version_id}/${build_id}/coverage/ --recursive --acl public-read --region us-east-1
  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      remote_file: ${project}/${build_variant}/${revision}/${version_id}/${build_id}/coverage/index.html
      bucket: mciuploads
      permissions: public-read
      local_file: mongoc/coverage/index.html
      content_type: text/html
      display_name: Coverage Report
  abi report:
  - command: shell.exec
    params:
      working_dir: mongoc
      shell: bash
      script: |-
        set -o errexit
        sh .evergreen/abi-compliance-check.sh
  - command: shell.exec
    params:
      silent: true
      working_dir: mongoc
      shell: bash
      script: |-
        set -o errexit
        export AWS_ACCESS_KEY_ID=${aws_key}
        export AWS_SECRET_ACCESS_KEY=${aws_secret}
        aws s3 cp abi-compliance/compat_reports s3://mciuploads/${project}/${build_variant}/${revision}/${version_id}/${build_id}/abi-compliance/compat_reports --recursive --acl public-read --region us-east-1
        if [ -e ./abi-compliance/abi-error.txt ]; then
          exit 1
        else
          exit 0
        fi
  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      remote_file: ${project}/${build_variant}/${revision}/${version_id}/${build_id}/abi-compliance/compat_report.html
      bucket: mciuploads
      permissions: public-read
      local_files_include_filter: mongoc/abi-compliance/compat_reports/**/*.html
      content_type: text/html
      display_name: 'ABI Report:'
  upload scan artifacts:
  - command: shell.exec
    type: test
    params:
      working_dir: mongoc
      shell: bash
      script: |-
        set -o errexit
        if find scan -name \*.html | grep -q html; then
          (cd scan && find . -name index.html -exec echo "<li><a href='{}'>{}</a></li>" \;) >> scan.html
        else
          echo "No issues found" > scan.html
        fi
  - command: shell.exec
    params:
      silent: true
      working_dir: mongoc
      shell: bash
      script: |-
        set -o errexit
        export AWS_ACCESS_KEY_ID=${aws_key}
        export AWS_SECRET_ACCESS_KEY=${aws_secret}
        aws s3 cp scan s3://mciuploads/${project}/${build_variant}/${revision}/${version_id}/${build_id}/scan/ --recursive --acl public-read --region us-east-1
  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      remote_file: ${project}/${build_variant}/${revision}/${version_id}/${build_id}/scan/index.html
      bucket: mciuploads
      permissions: public-read
      local_file: mongoc/scan.html
      content_type: text/html
      display_name: Scan Build Report
  upload mo artifacts:
  - command: shell.exec
    params:
      working_dir: mongoc
      shell: bash
      script: |-
        set -o errexit
        DIR=MO
        [ -d "/cygdrive/c/data/mo" ] && DIR="/cygdrive/c/data/mo"
        [ -d $DIR ] && find $DIR -name \*.log | xargs tar czf mongodb-logs.tar.gz
  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      remote_file: ${project}/${build_variant}/${revision}/${version_id}/${build_id}/logs/${task_id}-${execution}-mongodb-logs.tar.gz
      bucket: mciuploads
      permissions: public-read
      local_file: mongoc/mongodb-logs.tar.gz
      content_type: ${content_type|application/x-gzip}
      display_name: mongodb-logs.tar.gz
  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      remote_file: ${project}/${build_variant}/${revision}/${version_id}/${build_id}/logs/${task_id}-${execution}-orchestration.log
      bucket: mciuploads
      permissions: public-read
      local_file: mongoc/MO/server.log
      content_type: ${content_type|text/plain}
      display_name: orchestration.log
  - command: shell.exec
    params:
      working_dir: mongoc
      shell: bash
      script: |-
        set -o errexit
        # Find all core files from mongodb in orchestration and move to mongoc
        DIR=MO
        MDMP_DIR=$DIR
        [ -d "/cygdrive/c/data/mo" ] && DIR="/cygdrive/c/data/mo"
        [ -d "/cygdrive/c/mongodb" ] && MDMP_DIR="/cygdrive/c/mongodb"
        core_files=$(/usr/bin/find -H $MO $MDMP_DIR \( -name "*.core" -o -name "*.mdmp" \) 2> /dev/null)
        for core_file in $core_files
        do
          base_name=$(echo $core_file | sed "s/.*\///")
          # Move file if it does not already exist
          if [ ! -f $base_name ]; then
            mv $core_file .
          fi
        done
  - command: archive.targz_pack
    params:
      target: mongo-coredumps.tgz
      source_dir: mongoc
      include:
      - ./**.core
      - ./**.mdmp
  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      remote_file: ${project}/${build_variant}/${revision}/${version_id}/${build_id}/coredumps/${task_id}-${execution}-coredumps.log
      bucket: mciuploads
      permissions: public-read
      local_file: mongo-coredumps.tgz
      content_type: ${content_type|application/x-gzip}
      display_name: Core Dumps - Execution ${execution}
      optional: 'True'
  backtrace:
  - command: shell.exec
    params:
      working_dir: mongoc
      shell: bash
      script: |-
        set -o errexit
        ./.evergreen/debug-core-evergreen.sh
  upload working dir:
  - command: archive.targz_pack
    params:
      target: working-dir.tar.gz
      source_dir: mongoc
      include:
      - ./**
  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      remote_file: ${project}/${build_variant}/${revision}/${version_id}/${build_id}/artifacts/${task_id}-${execution}-working-dir.tar.gz
      bucket: mciuploads
      permissions: public-read
      local_file: working-dir.tar.gz
      content_type: ${content_type|application/x-gzip}
      display_name: working-dir.tar.gz
  upload test results:
  - command: attach.results
    params:
      file_location: mongoc/test-results.json
  bootstrap mongo-orchestration:
  - command: shell.exec
    params:
      working_dir: mongoc
      shell: bash
      script: |-
        set -o errexit
        export MONGODB_VERSION=${VERSION}
        export TOPOLOGY=${TOPOLOGY}
        export IPV4_ONLY=${IPV4_ONLY}
        export AUTH=${AUTH}
        export AUTHSOURCE=${AUTHSOURCE}
        export SSL=${SSL}
        export ORCHESTRATION_FILE=${ORCHESTRATION_FILE}
        export OCSP=${OCSP}
        export REQUIRE_API_VERSION=${REQUIRE_API_VERSION}
        sh .evergreen/integration-tests.sh
  run tests:
  - command: shell.exec
    type: test
    params:
      working_dir: mongoc
      shell: bash
      script: |-
        set -o errexit
        export COMPRESSORS='${COMPRESSORS}'
        export CC='${CC}'
        export AUTH=${AUTH}
        export SSL=${SSL}
        export URI=${URI}
        export IPV4_ONLY=${IPV4_ONLY}
        export VALGRIND=${VALGRIND}
        export MONGOC_TEST_URI=${URI}
        export DNS=${DNS}
        export ASAN=${ASAN}
        export CLIENT_SIDE_ENCRYPTION=${CLIENT_SIDE_ENCRYPTION}
        # Hide credentials.
        set +o xtrace
        set +o errexit
        # Only set creds if testing with Client Side Encryption.
        # libmongoc may build with CSE enabled (if the host has libmongocrypt installed)
        # and will try to run those tests (which fail on ASAN unless spawning is bypassed).
        if [ -n "$CLIENT_SIDE_ENCRYPTION" ]; then
          echo "testing with CSE"
          export MONGOC_TEST_AWS_SECRET_ACCESS_KEY="${client_side_encryption_aws_secret_access_key}"
          export MONGOC_TEST_AWS_ACCESS_KEY_ID="${client_side_encryption_aws_access_key_id}"
          export MONGOC_TEST_AZURE_TENANT_ID="${client_side_encryption_azure_tenant_id}"
          export MONGOC_TEST_AZURE_CLIENT_ID="${client_side_encryption_azure_client_id}"
          export MONGOC_TEST_AZURE_CLIENT_SECRET="${client_side_encryption_azure_client_secret}"
          export MONGOC_TEST_GCP_EMAIL="${client_side_encryption_gcp_email}"
          export MONGOC_TEST_GCP_PRIVATEKEY="${client_side_encryption_gcp_privatekey}"
          export MONGOC_TEST_CSFLE_TLS_CA_FILE=../drivers-evergreen-tools/.evergreen/x509gen/ca.pem
          export MONGOC_TEST_CSFLE_TLS_CERTIFICATE_KEY_FILE=../drivers-evergreen-tools/.evergreen/x509gen/client.pem
        fi
        export LOADBALANCED=${LOADBALANCED}
        export SINGLE_MONGOS_LB_URI="${SINGLE_MONGOS_LB_URI}"
        export MULTI_MONGOS_LB_URI="${MULTI_MONGOS_LB_URI}"
        set -o errexit
        sh .evergreen/run-tests.sh
  run tests bson:
  - command: shell.exec
    type: test
    params:
      working_dir: mongoc
      shell: bash
      script: |-
        set -o errexit
        CC="${CC}" sh .evergreen/run-tests-bson.sh
  run auth tests:
  - command: shell.exec
    type: test
    params:
      silent: true
      working_dir: mongoc
      shell: bash
      script: |-
        set -o errexit
        export AUTH_HOST='${auth_host}'
        export AUTH_PLAIN='${auth_plain}'
        export AUTH_MONGODBCR='${auth_mongodbcr}'
        export AUTH_GSSAPI='${auth_gssapi}'
        export AUTH_CROSSREALM='${auth_crossrealm}'
        export AUTH_GSSAPI_UTF8='${auth_gssapi_utf8}'
        export ATLAS_FREE='${atlas_free}'
        export ATLAS_FREE_SRV='${atlas_free_srv}'
        export ATLAS_REPLSET='${atlas_replset}'
        export ATLAS_REPLSET_SRV='${atlas_replset_srv}'
        export ATLAS_SHARD='${atlas_shard}'
        export ATLAS_SHARD_SRV='${atlas_shard_srv}'
        export ATLAS_TLS11='${atlas_tls11}'
        export ATLAS_TLS11_SRV='${atlas_tls11_srv}'
        export ATLAS_TLS12='${atlas_tls12}'
        export ATLAS_TLS12_SRV='${atlas_tls12_srv}'
        export REQUIRE_TLS12='${require_tls12}'
        export OBSOLETE_TLS='${obsolete_tls}'
        export VALGRIND='${valgrind}'
        export ATLAS_SERVERLESS_SRV='${atlas_serverless_srv}'
        export ATLAS_SERVERLESS='${atlas_serverless}'
        sh .evergreen/run-auth-tests.sh
  run mock server tests:
  - command: shell.exec
    type: test
    params:
      working_dir: mongoc
      shell: bash
      script: |-
        set -o errexit
        CC="${CC}" VALGRIND=${VALGRIND} sh .evergreen/run-mock-server-tests.sh
  cleanup:
  - command: shell.exec
    params:
      working_dir: mongoc
      shell: bash
      script: |-
        set -o errexit
        cd MO
        mongo-orchestration stop
  windows fix:
  - command: shell.exec
    params:
      working_dir: mongoc
      shell: bash
      script: |-
        set -o errexit
        for i in $(find .evergreen -name \*.sh); do
          cat $i | tr -d '\r' > $i.new
          mv $i.new $i
        done
  make files executable:
  - command: shell.exec
    params:
      working_dir: mongoc
      shell: bash
      script: |-
        set -o errexit
        for i in $(find .evergreen -name \*.sh); do
          chmod +x $i
        done
  prepare kerberos:
  - command: shell.exec
    params:
      silent: true
      working_dir: mongoc
      shell: bash
      script: |-
        set -o errexit
        if test "${keytab|}"; then
           echo "${keytab}" > /tmp/drivers.keytab.base64
           base64 --decode /tmp/drivers.keytab.base64 > /tmp/drivers.keytab
           cat .evergreen/kerberos.realm | $SUDO tee -a /etc/krb5.conf
        fi
  link sample program:
  - command: shell.exec
    type: test
    params:
      working_dir: mongoc
      shell: bash
      script: |-
        set -o errexit
        # Compile a program that links dynamically or statically to libmongoc,
        # using variables from pkg-config or CMake's find_package command.
        export BUILD_SAMPLE_WITH_CMAKE=${BUILD_SAMPLE_WITH_CMAKE}
        export BUILD_SAMPLE_WITH_CMAKE_DEPRECATED=${BUILD_SAMPLE_WITH_CMAKE_DEPRECATED}
        export ENABLE_SSL=${ENABLE_SSL}
        export ENABLE_SNAPPY=${ENABLE_SNAPPY}
        LINK_STATIC=  sh .evergreen/link-sample-program.sh
        LINK_STATIC=1 sh .evergreen/link-sample-program.sh
  link sample program bson:
  - command: shell.exec
    type: test
    params:
      working_dir: mongoc
      shell: bash
      script: |-
        set -o errexit
        # Compile a program that links dynamically or statically to libbson,
        # using variables from pkg-config or from CMake's find_package command.
        BUILD_SAMPLE_WITH_CMAKE=  BUILD_SAMPLE_WITH_CMAKE_DEPRECATED=  LINK_STATIC=  sh .evergreen/link-sample-program-bson.sh
        BUILD_SAMPLE_WITH_CMAKE=  BUILD_SAMPLE_WITH_CMAKE_DEPRECATED=  LINK_STATIC=1 sh .evergreen/link-sample-program-bson.sh
        BUILD_SAMPLE_WITH_CMAKE=1 BUILD_SAMPLE_WITH_CMAKE_DEPRECATED=  LINK_STATIC=  sh .evergreen/link-sample-program-bson.sh
        BUILD_SAMPLE_WITH_CMAKE=1 BUILD_SAMPLE_WITH_CMAKE_DEPRECATED=  LINK_STATIC=1 sh .evergreen/link-sample-program-bson.sh
        BUILD_SAMPLE_WITH_CMAKE=1 BUILD_SAMPLE_WITH_CMAKE_DEPRECATED=1 LINK_STATIC=  sh .evergreen/link-sample-program-bson.sh
        BUILD_SAMPLE_WITH_CMAKE=1 BUILD_SAMPLE_WITH_CMAKE_DEPRECATED=1 LINK_STATIC=1 sh .evergreen/link-sample-program-bson.sh
  link sample program MSVC:
  - command: shell.exec
    type: test
    params:
      working_dir: mongoc
      shell: bash
      script: |-
        set -o errexit
        # Build libmongoc with CMake and compile a program that links
        # dynamically or statically to it, using variables from CMake's
        # find_package command.
        export ENABLE_SSL=${ENABLE_SSL}
        export ENABLE_SNAPPY=${ENABLE_SNAPPY}
        LINK_STATIC=  cmd.exe /c .\\.evergreen\\link-sample-program-msvc.cmd
        LINK_STATIC=1 cmd.exe /c .\\.evergreen\\link-sample-program-msvc.cmd
  link sample program mingw:
  - command: shell.exec
    type: test
    params:
      working_dir: mongoc
      shell: bash
      script: |-
        set -o errexit
        # Build libmongoc with CMake and compile a program that links
        # dynamically to it, using variables from pkg-config.exe.
        cmd.exe /c .\\.evergreen\\link-sample-program-mingw.cmd
  link sample program MSVC bson:
  - command: shell.exec
    type: test
    params:
      working_dir: mongoc
      shell: bash
      script: |-
        set -o errexit
        # Build libmongoc with CMake and compile a program that links
        # dynamically or statically to it, using variables from CMake's
        # find_package command.
        export ENABLE_SSL=${ENABLE_SSL}
        export ENABLE_SNAPPY=${ENABLE_SNAPPY}
        LINK_STATIC=  cmd.exe /c .\\.evergreen\\link-sample-program-msvc-bson.cmd
        LINK_STATIC=1 cmd.exe /c .\\.evergreen\\link-sample-program-msvc-bson.cmd
  link sample program mingw bson:
  - command: shell.exec
    type: test
    params:
      working_dir: mongoc
      shell: bash
      script: |-
        set -o errexit
        # Build libmongoc with CMake and compile a program that links
        # dynamically to it, using variables from pkg-config.exe.
        cmd.exe /c .\\.evergreen\\link-sample-program-mingw-bson.cmd
  update codecov.io:
  - command: shell.exec
    params:
      working_dir: mongoc
      shell: bash
      script: |-
        set -o errexit
        export CODECOV_TOKEN=${codecov_token}
        curl -s https://codecov.io/bash | bash
  debug-compile-coverage-notest-nosasl-nossl:
  - command: shell.exec
    type: test
    params:
      working_dir: mongoc
      shell: bash
      script: |-
        set -o errexit
        export EXTRA_CONFIGURE_FLAGS="-DENABLE_COVERAGE=ON -DENABLE_EXAMPLES=OFF"
        DEBUG=ON CC='${CC}' MARCH='${MARCH}' SASL=OFF SSL=OFF SKIP_MOCK_TESTS=ON sh .evergreen/compile.sh
  debug-compile-coverage-notest-nosasl-openssl:
  - command: shell.exec
    type: test
    params:
      working_dir: mongoc
      shell: bash
      script: |-
        set -o errexit
        export EXTRA_CONFIGURE_FLAGS="-DENABLE_COVERAGE=ON -DENABLE_EXAMPLES=OFF"
        DEBUG=ON CC='${CC}' MARCH='${MARCH}' SASL=OFF SSL=OPENSSL SKIP_MOCK_TESTS=ON sh .evergreen/compile.sh
  build mongohouse:
  - command: shell.exec
    type: test
    params:
      working_dir: mongoc
      shell: bash
      script: |-
        set -o errexit
        if [ ! -d "drivers-evergreen-tools" ]; then
           git clone git@github.com:mongodb-labs/drivers-evergreen-tools.git
        fi
        cd drivers-evergreen-tools
        export DRIVERS_TOOLS=$(pwd)
        sh .evergreen/atlas_data_lake/build-mongohouse-local.sh
        cd ../
  run mongohouse:
  - command: shell.exec
    type: test
    params:
      working_dir: mongoc
      background: true
      shell: bash
      script: |-
        set -o errexit
        cd drivers-evergreen-tools
        export DRIVERS_TOOLS=$(pwd)
        sh .evergreen/atlas_data_lake/run-mongohouse-local.sh
  test mongohouse:
  - command: shell.exec
    type: test
    params:
      working_dir: mongoc
      shell: bash
      script: |-
        set -o errexit
        echo "testing that mongohouse is running..."
        ps aux | grep mongohouse
        echo $(pwd)
        echo $(ls)
        ls > dir.txt
        cat dir.txt
        echo $(cat dir.txt)
        export RUN_MONGOHOUSE_TESTS=true
        ./src/libmongoc/test-libmongoc --no-fork -l /mongohouse/* -d
        unset RUN_MONGOHOUSE_TESTS
  test versioned api:
  - command: shell.exec
    type: test
    params:
      working_dir: mongoc
      shell: bash
      script: |-
        set -o errexit
        export COMPRESSORS='${COMPRESSORS}'
        export CC='${CC}'
        export AUTH=${AUTH}
        export SSL=${SSL}
        export URI=${URI}
        export IPV4_ONLY=${IPV4_ONLY}
        export VALGRIND=${VALGRIND}
        export MONGOC_TEST_URI=${URI}
        export DNS=${DNS}
        export ASAN=${ASAN}
        export MONGODB_API_VERSION=1
        sh .evergreen/run-tests.sh
        unset MONGODB_API_VERSION
  run aws tests:
  - command: shell.exec
    type: test
    params:
      silent: true
      working_dir: mongoc
      shell: bash
      script: |-
        set -o errexit
        # Add AWS variables to a file.
        # Clone in one directory above so it does not get uploaded in working directory.
        git clone --depth=1 git://github.com/mongodb-labs/drivers-evergreen-tools.git ../drivers-evergreen-tools
        cat <<EOF > ../drivers-evergreen-tools/.evergreen/auth_aws/aws_e2e_setup.json
        {
            "iam_auth_ecs_account" : "${iam_auth_ecs_account}",
            "iam_auth_ecs_secret_access_key" : "${iam_auth_ecs_secret_access_key}",
            "iam_auth_ecs_account_arn": "arn:aws:iam::557821124784:user/authtest_fargate_user",
            "iam_auth_ecs_cluster": "${iam_auth_ecs_cluster}",
            "iam_auth_ecs_task_definition": "${iam_auth_ecs_task_definition}",
            "iam_auth_ecs_subnet_a": "${iam_auth_ecs_subnet_a}",
            "iam_auth_ecs_subnet_b": "${iam_auth_ecs_subnet_b}",
            "iam_auth_ecs_security_group": "${iam_auth_ecs_security_group}",
            "iam_auth_assume_aws_account" : "${iam_auth_assume_aws_account}",
            "iam_auth_assume_aws_secret_access_key" : "${iam_auth_assume_aws_secret_access_key}",
            "iam_auth_assume_role_name" : "${iam_auth_assume_role_name}",
            "iam_auth_ec2_instance_account" : "${iam_auth_ec2_instance_account}",
            "iam_auth_ec2_instance_secret_access_key" : "${iam_auth_ec2_instance_secret_access_key}",
            "iam_auth_ec2_instance_profile" : "${iam_auth_ec2_instance_profile}"
        }
        EOF
  - command: shell.exec
    type: test
    params:
      working_dir: mongoc
      shell: bash
      script: |-
        set -o errexit
        set -o errexit
        # Export the variables we need to construct URIs
        set +o xtrace
        export IAM_AUTH_ECS_ACCOUNT=${iam_auth_ecs_account}
        export IAM_AUTH_ECS_SECRET_ACCESS_KEY=${iam_auth_ecs_secret_access_key}
        sh ./.evergreen/run-aws-tests.sh ${TESTCASE}
  clone drivers-evergreen-tools:
  - command: shell.exec
    params:
      shell: bash
      script: |-
        set -o errexit
        if [ ! -d "drivers-evergreen-tools" ]; then
            git clone git@github.com:mongodb-labs/drivers-evergreen-tools.git --depth=1
        fi
  run kms servers:
  - command: shell.exec
    params:
      background: true
      shell: bash
      script: |-
        set -o errexit
        echo "Starting mock KMS servers..."
        cd ./drivers-evergreen-tools/.evergreen/csfle
        . ./activate_venv.sh
        python -u kms_http_server.py --ca_file ../x509gen/ca.pem --cert_file ../x509gen/server.pem --port 7999 &
        python -u kms_http_server.py --ca_file ../x509gen/ca.pem --cert_file ../x509gen/expired.pem --port 8000 &
        python -u kms_http_server.py --ca_file ../x509gen/ca.pem --cert_file ../x509gen/wrong-host.pem --port 8001 &
        python -u kms_http_server.py --ca_file ../x509gen/ca.pem --cert_file ../x509gen/server.pem --port 8002 --require_client_cert &
        python -u kms_kmip_server.py &
        echo "Starting mock KMS servers... done."
  start load balancer:
  - command: shell.exec
    params:
      shell: bash
      script: |-
        set -o errexit
        export DRIVERS_TOOLS=./drivers-evergreen-tools
        export MONGODB_URI="${MONGODB_URI}"
        bash $DRIVERS_TOOLS/.evergreen/run-load-balancer.sh start
  - command: expansions.update
    params:
      file: lb-expansion.yml
  stop load balancer:
  - command: shell.exec
    params:
      shell: bash
      script: |-
        set -o errexit
        # Only run if a load balancer was started.
        if [ -z "${SINGLE_MONGOS_LB_URI}" ]; then
            echo "OK - no load balancer running"
            exit 0
        fi
        export DRIVERS_TOOLS=./drivers-evergreen-tools
        export MONGODB_URI="foo" # TODO: DRIVERS-1833 remove this.
        $DRIVERS_TOOLS/.evergreen/run-load-balancer.sh stop
pre:
- func: fetch source
- func: windows fix
- func: make files executable
- func: prepare kerberos
post:
- func: backtrace
- func: upload working dir
- func: upload mo artifacts
- func: upload test results
- func: cleanup
- func: stop load balancer
timeout:
- func: backtrace
tasks:
- name: perf
  commands:
  - func: bootstrap mongo-orchestration
    vars:
      VERSION: latest
  - command: shell.exec
    params:
      working_dir: mongoc
      shell: bash
      script: |-
        ./perf/build_and_run.sh
  - command: perf.send
    params:
      name: perf
      file: mongoc/perf/perfsend_results.json
buildvariants:
- name: perf
  display_name: "Perf"
  run_on: ubuntu1804-large
  tasks:
  - perf